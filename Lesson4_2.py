# Task2. Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
# index_list = [i for i in range(1, len(my_list)) if my_list[i] > my_list[i-1]]
new_list = [a for i, a in enumerate(my_list) if my_list[i] > my_list[i-1] and i > 0]

print(f"Исходный список: {my_list}")
print(f"Новый список: {new_list}")

# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.

num_list = [i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]
print(f"кратные 20 или 21 в пределах от 20 до 240: {num_list}")

# Task3. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [i for i in my_list if my_list.count(i) == 1]

print(f"Исходный список: {my_list}")
print(f"Новый список: {new_list}")


# Task4. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

num_list = [i for i in range(10, 1001) if i % 2 == 0]
result = reduce(lambda a, b: a + b, num_list)
print(f"Четные числа от 100 до 1000: {num_list}")
print(f"Сумма этих чисел равна: {result}")

# Task5. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# 
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.


import itertools
# а) итератор, генерирующий целые числа c 3 до 10

for x in itertools.count(3, 1):
    print(x)
    if x > 9:
        break

# б) итератор, повторяющий элементы некоторого списка 10 раз.

my_list = ["jan", "feb", "mar",
           "apr", "may", "jun",
           "jul", "aug", "sep",
           "oct", "nov", "dec"
           ]

ytd = itertools.cycle(my_list)
i = 0
for month in ytd:
    print(month)
    i += 1
    if i >= 5:
        break

# Task6. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом:
# for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить
# только первые n чисел, начиная с 1! и до n!.
# факториал числа n — произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
    start = 1
    fact = 1
    while start <= n:
        yield fact
        start = start + 1
        fact = fact * start


while True:
    try:
        n = int(input('Факториал какого числа хотите получить:'))
        end = int(input('Сколько первых итераций показывать:'))
        for el in fact(n):
            print(el)
        break
    except ValueError:
        print("Введите числовые аргументы")
        continue

res = list(fact(n))[-1]
print('Факториал этого числа равен:', res)
print('Первые n чисел последовательности:', list(fact(n))[:end])









