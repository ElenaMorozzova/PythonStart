# Task1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод
# __init__()), который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде
# прямоугольной схемы.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в
# привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух
# объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой
# строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д


class Matrix:
    def __init__(self, *args):
        self.list_of_lists = list(*args)

    def matrix_size(self):
        j = len(self.list_of_lists[0])
        i = len(self.list_of_lists)
        return f'Размер матрицы: {i} на {j}'

    def __str__(self):
        return str('\n'.join(['\t'.join([str(i) for i in j]) for j in self.list_of_lists]))

    def __add__(self, other):
        matr = [row for row in self.list_of_lists for i in range(1)]
        try:
            for i in range(len(self.list_of_lists)):
                for j in range(len(other.list_of_lists[i])):
                    matr[i][j] = self.list_of_lists[i][j] + other.list_of_lists[i][j]
            return str('\n'.join(['\t'.join([str(i) for i in j]) for j in matr]))
        except IndexError:
            return f'Матрицы имеют разную размерность'


m_1 = Matrix([[1, 100], [3, 10], [30, 11]])
m_2 = Matrix([[2, 100], [4, 20], [30, 22]])
print(m_1)
print(m_1.matrix_size())
print(m_1 + m_2)


# Task2.Реализовать проект расчета суммарного расхода ткани на производство одежды. Основная
# сущность (класс) этого проекта — одежда, которая может иметь определенное название. К
# типам одежды в этом проекте относятся пальто и костюм. У этих типов одежды существуют
# параметры: размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и
# H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто
# (V/6.5 + 0.5), для костюма (2*H + 0.3). Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке
# знания: реализовать абстрактные классы для основных классов проекта, проверить на
# практике работу декоратора @property.

from abc import ABC, abstractmethod


class Clothes(ABC):
    @abstractmethod
    def calculate(self):
        pass

    @abstractmethod
    def calc_num(self):
        pass


class Coat(Clothes):
    def __init__(self, name, V):
        self.name = name
        self.V = V

    @property
    def calc_num(self):
        return self.V / 6.5 + 0.5

    @property
    def calculate(self):
        return f'Расход ткани на пальто "{self.name}" составил: {self.V / 6.5 + 0.5}'


class Suit(Clothes):
    def __init__(self, name, H):
        self.name = name
        self.H = H

    @property
    def calc_num(self):
        return 2 * self.H + 0.3

    @property
    def calculate(self):
        return f'Расход ткани на костюм "{self.name}" составил: {2 * self.H + 0.3}'


coat_1 = Coat("Синее в клетку", 48)
suit_1 = Suit("Черный в полоску", 1.75)
print(coat_1.calculate)
print(suit_1.calculate)
print(f'Общий расход ткани составил: {float(coat_1.calc_num)+float(suit_1.calc_num)}')


# Task3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо
# создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение ( __add__() ), вычитание ( __sub__()) ,
# умножение ( __mul__()) , деление ( __truediv__()) . Данные методы должны применяться только
# к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением
# до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида * ****\n*****\n*****. .., где количество ячеек между \ n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n** .
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n***** .


class Cell:
    def __init__(self, q_num):
        self.q_num = q_num

    def __add__(self, other):
        return Cell(self.q_num + other.q_num)

    def __mul__(self, other):
        return Cell(self.q_num * other.q_num)

    def __sub__(self, other):
        if self.q_num - other.q_num > 0:
            return Cell(self.q_num - other.q_num)
        else:
            return f'Разность меньше нуля'

    def __truediv__(self, other):
        try:
            return Cell(round(self.q_num / other.q_num))
        except ZeroDivisionError:
            return 'На ноль делить нельзя'

    def __repr__(self):
        return 'Количество ячеек в новой клетке: %s' % self.q_num

    def make_order(self, n):
        row = ""
        for i in range(self.q_num // n):
            row += f'{"*" * n} \\n'
        row += f'{"*" * (self.q_num % n)}'
        return row


print(Cell(1) + Cell(2))
print(Cell(1) - Cell(2))
print(Cell(8) - Cell(5))
print(Cell(8) * Cell(5))
cell_0 = Cell(20) / Cell(4)
print(cell_0.make_order(2))
cell_1 = Cell(20)
print(cell_1.make_order(6))
